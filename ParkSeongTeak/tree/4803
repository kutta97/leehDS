#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

bool visit[500 + 1];
int cnt = 0;
bool End = false;



class Node {
public:
	int idx;
	vector<Node*>linked;
};

Node arr[500 + 1];

void clear(int N) {
	cnt = 0;
	fill(visit, visit + N + 1, false);
	End = false;

	for (int i = 1; i <= N; i++) {
		arr[i].linked.clear();
	}
}

void dfs(Node* node) {
	if (node != NULL) {
		if (visit[node->idx]) {			//사이클
			if (node->idx != 0) {
				if (!End) {
					End = true;
					//cout << cnt<<" "<< node->idx<<" ";
					cnt--;
				}
			}
			return;
		}

		visit[node->idx] = true;


		for (const auto next : node->linked) {
			for (int num = 0; num < next->linked.size(); num++) {
				if (next->linked[num] == node) {
					next->linked[num] = &arr[0];

				}
			}
			dfs(next);
		}
	}
}

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	for (int i = 0; i <= 500; i++) {
		arr[i].idx = i;
	}
	int T = 1;
	while (true) {
		int N, M;
		cin >> N >> M;

		if (N == 0 && M == 0)
			break;



		for (int i = 0; i < M; i++) {
			int p1, p2;
			cin >> p1 >> p2;
			arr[p1].linked.push_back(&arr[p2]);
			arr[p2].linked.push_back(&arr[p1]);
		}

		for (int i = 1; i <= N; i++) {
			if (!visit[i]) {
				End = false;
				cnt++;
				dfs(&arr[i]);
			}
		}

		if (cnt == 0)
		{
			cout << "Case " << T << ": " << "No trees." << "\n";
		}
		else if (cnt == 1)
		{
			cout << "Case " << T << ": " << "There is one tree." << "\n";
		}
		else {
			cout << "Case " << T << ": " << "A forest of " << cnt << " trees." << "\n";
		}
		T++;
		clear(N);

	}
}
