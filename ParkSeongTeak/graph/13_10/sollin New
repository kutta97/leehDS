#include"mstree.h"


priority_queue< Edge, vector<Edge>, Compare >* PQ;

// 필요함수를 정의 및 구현하시오

void ReadEdges4sollin(istream& is) {
	//각 점(tree) 마다 연결된 간선들의 minheap이 필요함.
	// NNODES개의 minheap을 갖고 있는 PQ 배열을 생성하시오.
	PQ = new priority_queue< Edge, vector<Edge>, Compare >[NNODES];
	Edge e;
	while (GetEdge(is, e)) {
		PQ[e.v1].push(e);
		PQ[e.v2].push(e);
	}
}

void sollin() {
	Sets sets(NNODES);
	
	int counter = 0;

	queue<int> root; 
	int v1, v2, tmp, v , fd;
	for (int i = 0; i < NNODES; i++)
		root.push(i);

	while (!root.empty()) {
		tmp = root.front();
		root.pop();

		if (!PQ[tmp].empty()) {
			Edge e;
			do {
				e = PQ[tmp].top();
				PQ[tmp].pop();
			} while ((sets.Find(e.v1) == sets.Find(e.v2)) && !PQ[tmp].empty());	//간선고르기

			if (sets.Find(e.v1) != sets.Find(e.v2)) {	
				cout << e;
				v1 = sets.Find(e.v1);
				v2 = sets.Find(e.v2);

				sets.WeightedUnion(sets.Find(e.v1), sets.Find(e.v2));	// 두 집합을WeightedUnion
				

				fd = sets.Find(e.v1);// 이미 연결 sets.Find(e.v1) == sets.Find(e.v2)
				if (fd != v1) v = v1;
				else v = v2;

				
				while (!PQ[v].empty()) {
					PQ[fd].push(PQ[v].top());
					PQ[v].pop();
				}
				root.push(fd);

			}
		
		}
		
	}


}

int main(int argc, char* argv[]) {
	ifstream is;
	if (argc == 1) is.open("kin.txt");
	else is.open(argv[1]);
	if (!is) { cerr << "No such input file\n"; exit(1); }
	is >> NNODES;
	if (NNODES < 2) { cerr << "#nodes must be 2.." << endl; exit(1); }

	try {
		ReadEdges4sollin(is);
		sollin();
	}

	catch (char const* str)
	{
		cerr << "Exception: " << str << endl; exit(1);
	}


}
