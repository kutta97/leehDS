/*

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

class Node {
public:
	bool haveM = false;
	Node* Mother;
	int idx;

	vector<int> Relation;		//처음에는 뭐가 root 인지 모르기 때문에 우선 저장
};

vector<Node>arr;				// 이쁘게 tree구조로 만들어서 하나하나 서치하면 시간초과


void ARRAY(int i) {				//이미 부모노드가 확정된 노드와 연관된 노드중 부모노드가 확정되지 않은 노드가있다면 이 노드가 불확정노드의 부모노드
	for (const auto& next : arr[i].Relation) {
		if (!arr[next].haveM) {
			arr[next].Mother = &arr[i];
			arr[next].haveM = true;
			ARRAY(next);
		}
	}
	arr[i].Relation.clear();	// 관계확정 후 클리어
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;

	cin >> N;
	arr = vector<Node>(N + 1);
	//queue<int> No;

	for (int i = 0; i < N + 1; i++) {
		arr[i].idx = i;
	}
	arr[1].haveM = true;
	for (int i = 0; i < N - 1; i++) {
		int x1, x2;
		cin >> x1 >> x2;
		if (arr[x1].haveM) {
			arr[x2].Mother = &arr[x1];
			arr[x2].haveM = true;
		}
		else if (arr[x2].haveM) {
			arr[x1].Mother = &arr[x2];
			arr[x1].haveM = true;
		}
		else {
			arr[x1].Relation.push_back(x2);
			arr[x2].Relation.push_back(x1);
		}
	}



	for (int i = 2; i <= N; i++) {
		if (arr[i].haveM && !arr[i].Relation.empty()) {
			ARRAY(i);
		}
	}



	for (int i = 2; i < N + 1; i++) {
		cout << (*arr[i].Mother).idx << "\n";
	}



}
*/

//
//
//

/*
class Node {
public:
	bool haveM = false;
	Node* Mother;
	int idx;

	vector<int> Relation;		//처음에는 뭐가 root 인지 모르기 때문에 우선 저장
};
*/




#include <algorithm>
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <stack>

using namespace std;
const int MAX = 100111;		// 동적할당보다 속도는 빠르겠으나 공간낭비 +-
vector<int> a[MAX];			// == Relation
int parent[MAX]; 			// Node* Mother 맵핑
bool check[MAX]; 			// haveM 
int depth[MAX];	 			// Lv 나는 사용하지않음 선후관계즉시 파악가능 하지만 아직 확정안된 node와 확정노드의 대소비교가 의미있나?

							// 확인결과 의미없음 공부용? 아무튼 depth표현을 어떻게 만드는지는 확인
							//int dist[MAX];	 			// ?? 간선 가중치 언급없음 ??사용없음
	
int main() {
	int n;
	cin >> n;		//노드 개수
	for (int i = 0; i < n - 1; i++) {
		int u, v, w;
		cin >> u >> v;
		a[u].push_back(v);
		a[v].push_back(u);
	}
	//depth[1] = 0;
	check[1] = true;
	queue<int> q;
	q.push(1);
	parent[1] = 0;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		for (int y : a[x]) {
			if (!check[y]) {
				depth[y] = depth[x] + 1;	
				check[y] = true;
				parent[y] = x;
				q.push(y);
			}
		}
	}
	for (int i = 2; i <= n; i++) {
		cout << parent[i] << "\n";
	}
	return 0;
}

//기존코드와 차이없음

//결과적으로 나는 class 정리를 했고 백준은 안 함 메모리 속도 모두 기존 코드가 빠르지만, 속도 이슈는
//depth 같은 더미 코드 이슈로 판단 공부목적으로 보이기에 삭제 보류
