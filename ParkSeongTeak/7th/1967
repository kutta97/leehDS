/*
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;


void DFS(vector<pair<int, int>>* graph, bool* visit, int& Dist, int& farPoint, int now, int cost) {
	if (visit[now]) {

		return;
	}
	visit[now] = true;
	if (Dist < cost) {
		Dist = cost;
		farPoint = now;
	}

	for (const auto next : graph[now]) {
		DFS(graph, visit, Dist, farPoint, next.first, cost + next.second);
	}
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);



	int V;
	cin >> V;

	//graph[현재노드] {{연결노드,거리},{연결노드,거리}}
	vector<pair<int, int>>* graph = new vector<pair<int, int>>[V + 1];
	bool* visit = new bool[V + 1];
	int farPoint = 0;
	int Dist = 0;



	for (int i = 0; i < V-1; i++) {
		int P1, P2, cost;
		cin >> P1 >> P2 >> cost;
		graph[P1].push_back({ P2,cost });
		graph[P2].push_back({ P1,cost }); //얘는 양방통행

	}


	fill(visit, visit + V + 1, false);
	DFS(graph, visit, Dist, farPoint, 1, 0);

	fill(visit, visit + V + 1, false);
	DFS(graph, visit, Dist, farPoint, farPoint, 0);
	cout << Dist;

}

*/


///당연히 논리차이 없음 설명은 1167
#include <cstdio>
#include <queue>
#include <vector>
#include <cstring>
using namespace std;
struct Edge {
    int to;
    int cost;
    Edge(int to, int cost) : to(to), cost(cost) {
    }
};
vector<Edge> a[10001];
bool check[10001];
int dist[10001];
void bfs(int start) {
    memset(dist, 0, sizeof(dist));
    memset(check, false, sizeof(check));
    queue<int> q;
    check[start] = true;
    q.push(start);
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        for (int i = 0; i < a[x].size(); i++) {
            Edge& e = a[x][i];
            if (check[e.to] == false) {
                dist[e.to] = dist[x] + e.cost;
                q.push(e.to);
                check[e.to] = true;
            }
        }
    }
}
int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n - 1; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        a[u].push_back(Edge(v, w));
        a[v].push_back(Edge(u, w));
    }
    bfs(1);
    int start = 1;
    for (int i = 2; i <= n; i++) {
        if (dist[i] > dist[start]) {
            start = i;
        }
    }
    bfs(start);
    int ans = dist[1];
    for (int i = 2; i <= n; i++) {
        if (ans < dist[i]) {
            ans = dist[i];
        }
    }
    printf("%d\n", ans);
    return 0;
}
