/*
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;


void DFS(vector<pair<int, int>>* graph, bool * visit , int& Dist, int &farPoint ,int now, int cost) {
    if (visit[now]) {

        return;
    }
    visit[now] = true;
    if (Dist < cost) {
        Dist = cost;
        farPoint = now;
    }

    for (const auto next : graph[now]) {
        DFS(graph,visit,Dist,farPoint, next.first, cost + next.second);
    }
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);



    int V;
    cin >> V;

    //graph[현재노드] {{연결노드,거리},{연결노드,거리}}
    vector<pair<int, int>>* graph = new vector<pair<int, int>>[V+1];
    bool* visit = new bool[V+1];
    int farPoint = 0;
    int Dist = 0;



    for (int i = 0; i < V; i++) {
        int P1, P2, cost;
        cin >> P1;
        while (1) {
            cin >> P2;
            if (P2 == -1)
                break;
            cin >> cost;
            graph[P1].push_back({ P2,cost });
        }
    }


    fill(visit, visit + V + 1, false);
    DFS(graph, visit, Dist, farPoint, 1, 0);	//한쪽끝 겟
    fill(visit, visit + V + 1, false);
    DFS(graph, visit, Dist, farPoint, farPoint, 0);// 다른쪽끝 과 코스트 겟
    cout << Dist;

}
*/



#include <cstdio>
#include <queue>
#include <vector>
#include <cstring>
using namespace std;
struct Edge {
    int to;
    int cost;
    Edge(int to, int cost) : to(to), cost(cost) {
    }
};
vector<Edge> a[100001];
bool check[100001];
int dist[100001];
void bfs(int start) {   //여기서는 BFS탐색 나는 DFS탐색 BFS가 더 효율적인 상황인가?
    // 아니다 만약 최단거리라면 당연히 bfs가 효율적이고 나도 bfs를 쓰겠지만 
    // 최장거리의 경우 DFS의 결국 모든 경우의 수를 순회한 후 가장 큰값을 고르는것과 
    //  bfs의 가장 긴 거리를 구하는것은 둘다 결국 모든경우의수 탐색이 필요하기에 의미없는차이다.
    // 둘 다 속도 메모리 동일하게 들어감으로 선택의 영역 차이 없다 봐도 무방

    memset(dist, 0, sizeof(dist));
    memset(check, false, sizeof(check));
    queue<int> q;
    check[start] = true;
    q.push(start);
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        for (int i = 0; i < a[x].size(); i++) {
            Edge& e = a[x][i];
            if (check[e.to] == false) {
                dist[e.to] = dist[x] + e.cost;
                q.push(e.to);
                check[e.to] = true;
            }
        }
    }
}
int main() {
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        int x;
        scanf("%d", &x);
        while (true) {
            int y, z;
            scanf("%d", &y);
            if (y == -1) break;
            scanf("%d", &z);
            a[x].push_back(Edge(y, z));
        }
    }
    bfs(1);
    int start = 1;
    for (int i = 2; i <= n; i++) {              //굳이 밖으로 꺼내야하나?
                                                //함수의 간결성을 고려하면 이게 더 좋은...가?
        if (dist[i] > dist[start]) {            //결과적으로 시작점으로 한쪽끝 잡고 다른쪽끝 검사하는것은 
            start = i;                          //동일하다
        }
    }
    bfs(start);
    int ans = dist[1];
    for (int i = 2; i <= n; i++) {
        if (ans < dist[i]) {
            ans = dist[i];
        }
    }
    printf("%d\n", ans);
    return 0;
}

//결과적으로 논리전개에서 유의미한 차이는 없다
